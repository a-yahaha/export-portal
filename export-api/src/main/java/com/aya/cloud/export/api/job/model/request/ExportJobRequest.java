package com.aya.cloud.export.api.job.model.request;

import com.aya.cloud.export.api.job.annotation.ExportTitle;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.reflect.FieldUtils;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @author yajun
 * @version 1.0.0
 * @ClassName ExportJobRequest
 * @description 导出任务的请求
 * @date created in 21:52 2023/6/25
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ExportJobRequest implements Serializable {

    /**
     * 导出的业务配置key
     */
    private String configKey;

    /**
     * 不同job设置的动态变量
     */
    private List<DynamicColumn> dynamicColumnList;

    /**
     * 导出的文件名称
     */
    private String fileName;

    /**
     * excel文件sheet标题
     */
    private String sheetTitle;

    /**
     * 操作人
     */
    private Operator operator;


    /**
     * 通股注解自动生产导出的列
     *
     * @param object 参数对象
     */
    public void autoGenerateDynamicColumns(Class<? extends Serializable> object) {
        Field[] declaredFields = FieldUtils.getAllFields(object);

        this.dynamicColumnList = Arrays.stream(declaredFields).map(field -> {
                    field.setAccessible(true);
                    ExportTitle annotation = field.getAnnotation(ExportTitle.class);
                    if (Objects.isNull(annotation)) {
                        return null;
                    }
                    String key = field.getName();
                    String title = Optional.of(annotation).map(ExportTitle::title).orElse("");
                    int width = Optional.of(annotation).map(ExportTitle::width).orElse(0);
                    int order = Optional.of(annotation).map(ExportTitle::order).orElse(100);
                    DynamicColumn dynamicColumn = new DynamicColumn();
                    dynamicColumn.setTitle(title);
                    dynamicColumn.setKey(key);
                    dynamicColumn.setWidth(width);
                    dynamicColumn.setOrder(order);
                    return dynamicColumn;
                }).filter(Objects::nonNull)
                .sorted(Comparator.comparingInt(DynamicColumn::getOrder))
                .collect(Collectors.toList());
    }

    /**
     * 添加动态列
     */
    public void addDynamicColumn(DynamicColumn dynamicColumn) {
        if (Objects.isNull(dynamicColumn)
                || StringUtils.isBlank(dynamicColumn.getKey())
                || StringUtils.isBlank(dynamicColumn.getTitle())) {
            return;
        }
        if (CollectionUtils.isEmpty(this.dynamicColumnList)) {
            this.dynamicColumnList = new ArrayList<>();
            this.dynamicColumnList.add(dynamicColumn);
            return;
        }
        boolean containColumn = dynamicColumnList.stream()
                .anyMatch(column -> Objects.equals(column.getKey(), dynamicColumn.getKey()));
        if (containColumn) {
            return;
        }
        this.dynamicColumnList.add(dynamicColumn);
    }

}
